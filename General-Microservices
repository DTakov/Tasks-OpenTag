Microservice architecture сподпомага изграждането на приложенията, като колекция
от самостоятелни услуги разработени за бизнес модел. Може да приемем тази атхитектура
за стил или модел на архитектурно развитие. Добър пример за приложение изполващо такъв 
тип архитектура може да бъде  такова за електронна търговия. Фокуса върху всяка бизнес 
способност е добре разпределена измежду отделните "Микроуслуги". Всяка така наречена
микроуслуга има свой собствен сървър, като комуникацията между услугите е постоянна.
Интересното факт е, че езика за създаване на отделните микросървиси може различен, като това не е 
проблем по никакъв начин за апликацията. Всяка заявка направена към различните услуги връща
изцяло независим отговор. Това от своя страна показва именно лекотата в общуването между 
отделните сървари. Подръжката на микросървисите е доста проста и не отнема голямо усилие.
Тестването на микроуслугите обаче е далеч по-сложно от това на едно монолитно приложение.
Изграждането и структорирането на план и прилагането на тестовите техники също е доста времеемко,
като за постигането на голяма ефикастност следва да погледнем приложението като едно цяло, а също и 
компонентно. Тестването от своя страна може да бъде пирамидално, прилагайки различни техники и тестване
на отделни компоненти в излолация. Като част от стратегията на тестване можем да включим Unit testing,
за да разгледаме поведението чисто компонентно в отделните микроуслуги. Integration testing също е
задължителна част от обхвата на тестовия план, като с него целим да тестваме комуникационните пътища 
и взаимодействието между отделните елементи. Друга тестова техника, която е добре да бъде включена в 
тестовия план е END to END testing, като с нея целим да гарантираме, че всяка една функционалност е 
работеща и вършеща точно това, за което е определена.
